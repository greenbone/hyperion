# -*- coding: utf-8 -*-
# Copyright (C) 2020-2021 Greenbone Networks GmbH
#
# SPDX-License-Identifier: AGPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# from datetime import datetime, timezone
from pathlib import Path

from unittest.mock import patch

from selene.tests import SeleneTestCase, GmpMockFactory

CWD = Path(__file__).absolute().parent


@patch('selene.views.Gmp', new_callable=GmpMockFactory)
class VulnerabilityTestCase(SeleneTestCase):
    def test_require_authentication(self, _mock_gmp: GmpMockFactory):
        response = self.query(
            '''
            query {
                vulnerability(id: "05d1edfa-3df8-11ea-9651-7b09b3acce77") {
                    id
                    name
                }
            }
            '''
        )

        self.assertResponseAuthenticationRequired(response)

    def test_get_vulnerability(self, mock_gmp: GmpMockFactory):
        mock_gmp.mock_response(
            'get_vulnerability',
            '''
            <get_vulns_response>
                <vuln id="1.3.6.1.4.1.25623.1.0.814238">
                    <name>a</name>
                </vuln>
            </get_vulns_response>
            ''',
        )

        self.login('foo', 'bar')

        response = self.query(
            '''
            query {
                vulnerability(id: "1.3.6.1.4.1.25623.1.0.814238") {
                    id
                    name
                }
            }
            '''
        )

        json = response.json()

        self.assertResponseNoErrors(response)

        vulnerability = json['data']['vulnerability']

        self.assertEqual(vulnerability['name'], 'a')
        self.assertEqual(vulnerability['id'], '1.3.6.1.4.1.25623.1.0.814238')

    def test_complex_vulnerability(self, mock_gmp: GmpMockFactory):
        vulnerability_xml_path = CWD / 'example-vulnerability.xml'
        vulnerability_xml_str = vulnerability_xml_path.read_text()

        mock_gmp.mock_response('get_vulnerability', vulnerability_xml_str)

        self.login('foo', 'bar')

        response = self.query(
            '''
            query {
                vulnerability(id: "1.3.6.1.4.1.25623.1.0.814238") {
                    id
                    name
                    severity
                    creationTime
                    modificationTime
                    type
                    qod
                    hostCount
                    results {
                        count
                        newest
                        oldest
                    }
                }
            }
            '''
        )

        json = response.json()

        self.assertResponseNoErrors(response)

        vulnerability = json['data']['vulnerability']

        self.assertEqual(vulnerability['name'], 'xyzxy')
        self.assertEqual(vulnerability['id'], '1.3.6.1.4.1.25623.1.0.814238')
        self.assertEqual(
            vulnerability['creationTime'], '2018-10-03T11:23:05+00:00'
        )
        self.assertEqual(
            vulnerability['modificationTime'], '2019-07-16T10:51:36+00:00'
        )
        self.assertEqual(vulnerability['severity'], 9.3)
        self.assertEqual(vulnerability['type'], 'nvt')
        self.assertEqual(vulnerability['qod'], 80)
        self.assertEqual(vulnerability['hostCount'], 66)

        self.assertIsNotNone(vulnerability['results'])
        results = vulnerability['results']
        self.assertEqual(results['count'], 136)
        self.assertEqual(results['oldest'], '2020-06-19T09:31:15+00:00')
        self.assertEqual(results['newest'], '2020-11-13T11:17:20+00:00')
